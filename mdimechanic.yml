code_name: 'GCMC'
docker:
  image_name: 'mdi/gcmc'


  build_image:
    # Install dependencies
    - apt-get update
    - apt-get install -y rsync csh wget groff curl git vim

    - apt-get install -y patch wget nano make gcc gfortran cmake
    - pip install jinja2
    - pip install cmake
    - pip install pymdi
    - pip install mpi4py

    # Install ftnchek
    - wget ftnchek-3.3.1.tar.gz https://www.dsm.fordham.edu/~ftnchek/download/ftnchek-3.3.1.tar.gz || true
    - tar -zxvf ftnchek-3.3.1.tar.gz
    - cd ftnchek-3.3.1
    - ./configure
    - make
    - make install

  build_engine:
    # Copy GAMESS source files into the build directory
    #- cd source
    #- git clone https://github.com/gms-bbg/gamess.git
    - mkdir -p build
    - |
      if [ ! -d "build/gamess" ] ; then
        rsync -a source/gamess build
        cd build/gamess
    
        # Ensure the line endings are lf
        git rm --cached -r .
        git reset --hard
        cd ../../
      fi
    - cd build/gamess

    # Prepare install.info
    - export GCC_MAJOR_VERSION=`gcc --version | grep ^gcc | sed 's/gcc (.*) //g' | grep -o '[0-9]\{1,3\}\.[0-9]\{0,3\}\.[0-9]\{0,3\}' | cut -d '.' -f 1`
    - export GCC_MINOR_VERSION=`gcc --version | grep ^gcc | sed 's/gcc (.*) //g' | grep -o '[0-9]\{1,3\}\.[0-9]\{0,3\}\.[0-9]\{0,3\}' | cut -d '.' -f 2`
    - export NUM_CPU_CORES=`grep -c ^processor /proc/cpuinfo`
    - python bin/create-install-info.py --fortran_version ${GCC_MAJOR_VERSION}.${GCC_MINOR_VERSION} --mdi --mpich --mpi --mpi_path /usr/lib/x86_64-linux-gnu/mpich

    # Generate the Makefile
    - export builddir=$(pwd)
    - echo "GMS_PATH = ${builddir}" > Makefile
    - echo "GMS_VERSION = 00" >> Makefile
    - echo "GMS_BUILD_PATH = ${builddir}" >> Makefile
    - echo "GMS_FC = gfortran" >> Makefile
    - echo "GMS_CC = gcc" >> Makefile
    - echo "GMS_MDI = true" >> Makefile
    - export GMS_MDI=true
    - echo 'include $(GMS_PATH)/Makefile.in' >> Makefile

    # Build the MDI Library
    - ./tools/mdi/download-mdi.csh
    - make -j $NUM_CPU_CORES libmdi

    # Build DDI
    - make -j 1 ddi

    # Build GAMESS
    - make -j 1

    # Set path options in rungms
    - sed -i 's/set SCR=\/scr1\/$USER/set SCR=\/repo\/tests\/scratch/g' /repo/build/gamess/rungms
    - sed -i 's/set USERSCR=~\/gamess-devv/set USERSCR=\/repo\/tests\/scratch\/userscr/g' /repo/build/gamess/rungms
    - sed -i 's/set GMSPATH=~\/gamess-devv/set GMSPATH=\/repo\/build\/gamess/g' /repo/build/gamess/rungms

    # Set MPI options for rungms
    - sed -i 's/set TARGET=sockets/set TARGET=mpi/g' /repo/build/gamess/rungms
    - sed -i 's/set DDI_MPI_CHOICE=impi/set DDI_MPI_CHOICE=mpich/g' /repo/build/gamess/rungms

    # Run FTNCHEK to check for any errors in the MDI code
    #- echo "=================== CHECKGMS OUTPUT ==================="
    #- cd /repo/build/gamess/source
    #- ftnchek -noextern -common=2 -arguments=1 -array=0 -calltree=0 -nocrossref -portability=tab -f77=automatic-array,relops,cycle-exit,case-construct modmdi.src
    #- echo "======================================================="
    #- cd /repo

    # Run the tests
    #- cd /repo/build/gamess
    #- echo "Running serial tests"
    #- tests/runtest.py -n 1 --folder travis-ci --skip_folder travis-ci/parallel --stderr
    #- echo "Running parallel tests"
    #- tests/runtest.py -n 2 --folder travis-ci/parallel --stderr
    #- echo "Checking tests"
    #- cd tests
    #- ./checkgms.py
    #- echo "Finished tests"

    # Obtain a clone of LAMMPS
    - cd /repo
    - |
      if [ ! -d "build/lammps" ]; then
        git clone https://github.com/lammps/lammps.git --branch mdi-expand build/lammps
      fi
    - LAMMPS_INSTALL='mpi'
  
    # Build LAMMPS
    - cd build
    - mkdir -p lammps/build
    - cd lammps/build
    - cmake -D PKG_RIGID=yes -D PKG_MOLECULE=yes -D PKG_KSPACE=yes -D PKG_MDI=yes -D BUILD_SHARED_LIBS=yes -D LAMMPS_MACHINE=mpi ../cmake
    - make
    - cp lmp_mpi lmp_mdi
    - cp liblammps_mpi.so liblammps.so


  validate_engine:
    - echo "Insert code that will confirm that your code has been built successfully"
    - export USER=MDIMECHANIC
    - |
      if [ -d "tests/scratch" ] ; then
        rm -r tests/scratch
      fi
    - mkdir -p tests/scratch
    - mkdir -p tests/scratch/userscr

    # These files are created to ensure that the rungms script doesn't return a non-zero exit code
    - cd tests/scratch
    - touch TEST-mdi.cube
    - touch TEST-mdi.grd
    - touch TEST-mdi.csv
    - cd ../../

    - cd tests/validate_engine
    - mpiexec -n 1 csh -e ../../build/gamess/rungms TEST.inp 00 2 2 > TEST.log 2> TEST.err


report:
  prepend:
    - "## Usage Instructions"
    - 
    - This repo does not include a distribution of the GAMESS software package; users must acquire the source code of GAMESS seperately.
    - The GAMESS source code must then be copied into a `source/gamess` subdirectory within this repository.
    - Afterwords, the repo can be built using the `mdimechanic build` and `mdimechanic report` commands.

engine_tests:
  # Provide at least one example input that can be used to test your code's MDI functionality
  script:
    - echo "Insert commands to run an example calculation here"
    - export USER=MDIMECHANIC
    - |
      if [ -d "tests/scratch" ] ; then
        rm -r tests/scratch
      fi
    - mkdir -p tests/scratch
    - mkdir -p tests/scratch/userscr

    # These files are created to ensure that the rungms script doesn't return a non-zero exit code
    - cd tests/scratch
    - touch TEST-mdi.cube
    - touch TEST-mdi.grd
    - touch TEST-mdi.csv
    - cd ../../

    - cd tests/validate_engine
    - mpiexec -n 1 csh -e ../../build/gamess/rungms -mdi "${MDI_OPTIONS}" TEST.inp 00 2 2 > TEST.log 2> TEST.err

test_drivers:
  mytest:
    script:
      - cd tests/drivers/mytest
      - python mytest.py

      # Output data from the engine
      #- cd ../../../tests/validate_engine
      #- echo "==================== ENGINE OUTPUT ===================="
      #- cat TEST.log
      #- echo "======================================================="